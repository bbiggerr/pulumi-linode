// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Linode Image resource.  This can be used to create, modify, and delete Linodes Images.  Linode Images are snapshots of a Linode Instance Disk which can then be used to provision more Linode Instances.  Images can be used across regions.
// 
// For more information, see [Linode's documentation on Images](https://www.linode.com/docs/platform/disk-images/linode-images/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createImage).
// 
// ## Attributes
// 
// This resource exports the following attributes:
// 
// * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
// 
// * `created` - When this Image was created.
// 
// * `created_by` - The name of the User who created this Image.
// 
// * `deprecated` - Whether or not this Image is deprecated. Will only be True for deprecated public Images.
// 
// * `is_public` - True if the Image is public.
// 
// * `size` - The minimum size this Image needs to deploy. Size is in MB.
// 
// * `type` - How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.
// 
// * `expiry` - Only Images created automatically (from a deleted Linode; type=automatic) will expire.
// 
// * `vendor` - The upstream distribution vendor. Nil for private Images.
type Image struct {
	s *pulumi.ResourceState
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOpt) (*Image, error) {
	if args == nil || args.DiskId == nil {
		return nil, errors.New("missing required argument 'DiskId'")
	}
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.LinodeId == nil {
		return nil, errors.New("missing required argument 'LinodeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["diskId"] = nil
		inputs["label"] = nil
		inputs["linodeId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["diskId"] = args.DiskId
		inputs["label"] = args.Label
		inputs["linodeId"] = args.LinodeId
	}
	inputs["created"] = nil
	inputs["createdBy"] = nil
	inputs["deprecated"] = nil
	inputs["expiry"] = nil
	inputs["isPublic"] = nil
	inputs["size"] = nil
	inputs["type"] = nil
	inputs["vendor"] = nil
	s, err := ctx.RegisterResource("linode:index/image:Image", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageState, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["created"] = state.Created
		inputs["createdBy"] = state.CreatedBy
		inputs["deprecated"] = state.Deprecated
		inputs["description"] = state.Description
		inputs["diskId"] = state.DiskId
		inputs["expiry"] = state.Expiry
		inputs["isPublic"] = state.IsPublic
		inputs["label"] = state.Label
		inputs["linodeId"] = state.LinodeId
		inputs["size"] = state.Size
		inputs["type"] = state.Type
		inputs["vendor"] = state.Vendor
	}
	s, err := ctx.ReadResource("linode:index/image:Image", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Image) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Image) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// When this Image was created.
func (r *Image) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// The name of the User who created this Image.
func (r *Image) CreatedBy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdBy"])
}

// Whether or not this Image is deprecated. Will only be True for deprecated public Images.
func (r *Image) Deprecated() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deprecated"])
}

// A detailed description of this Image.
func (r *Image) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The ID of the Linode Disk that this Image will be created from.
func (r *Image) DiskId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["diskId"])
}

// Only Images created automatically (from a deleted Linode; type=automatic) will expire.
func (r *Image) Expiry() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expiry"])
}

// True if the Image is public.
func (r *Image) IsPublic() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isPublic"])
}

// A short description of the Image. Labels cannot contain special characters.
func (r *Image) Label() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["label"])
}

// The ID of the Linode that this Image will be created from.
func (r *Image) LinodeId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["linodeId"])
}

// The minimum size this Image needs to deploy. Size is in MB.
func (r *Image) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from
// a deleted Linode.
func (r *Image) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The upstream distribution vendor. Nil for private Images.
func (r *Image) Vendor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vendor"])
}

// Input properties used for looking up and filtering Image resources.
type ImageState struct {
	// When this Image was created.
	Created interface{}
	// The name of the User who created this Image.
	CreatedBy interface{}
	// Whether or not this Image is deprecated. Will only be True for deprecated public Images.
	Deprecated interface{}
	// A detailed description of this Image.
	Description interface{}
	// The ID of the Linode Disk that this Image will be created from.
	DiskId interface{}
	// Only Images created automatically (from a deleted Linode; type=automatic) will expire.
	Expiry interface{}
	// True if the Image is public.
	IsPublic interface{}
	// A short description of the Image. Labels cannot contain special characters.
	Label interface{}
	// The ID of the Linode that this Image will be created from.
	LinodeId interface{}
	// The minimum size this Image needs to deploy. Size is in MB.
	Size interface{}
	// How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically
	// from a deleted Linode.
	Type interface{}
	// The upstream distribution vendor. Nil for private Images.
	Vendor interface{}
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// A detailed description of this Image.
	Description interface{}
	// The ID of the Linode Disk that this Image will be created from.
	DiskId interface{}
	// A short description of the Image. Labels cannot contain special characters.
	Label interface{}
	// The ID of the Linode that this Image will be created from.
	LinodeId interface{}
}
