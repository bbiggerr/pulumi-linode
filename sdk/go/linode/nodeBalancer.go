// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Linode NodeBalancer resource.  This can be used to create, modify, and delete Linodes NodeBalancers in Linode's managed load balancer service.
// For more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createNodeBalancer).
// 
// The Linode Guide, [Create a NodeBalancer with Terraform](https://www.linode.com/docs/applications/configuration-management/create-a-nodebalancer-with-terraform/), provides step-by-step guidance and additional examples.
// 
// ## Attributes
// 
// This resource exports the following attributes:
// 
// * `hostname` - This NodeBalancer's hostname, ending with .nodebalancer.linode.com
// 
// * `ipv4` - The Public IPv4 Address of this NodeBalancer
// 
// * `ipv6` - The Public IPv6 Address of this NodeBalancer
type NodeBalancer struct {
	s *pulumi.ResourceState
}

// NewNodeBalancer registers a new resource with the given unique name, arguments, and options.
func NewNodeBalancer(ctx *pulumi.Context,
	name string, args *NodeBalancerArgs, opts ...pulumi.ResourceOpt) (*NodeBalancer, error) {
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientConnThrottle"] = nil
		inputs["label"] = nil
		inputs["region"] = nil
		inputs["tags"] = nil
	} else {
		inputs["clientConnThrottle"] = args.ClientConnThrottle
		inputs["label"] = args.Label
		inputs["region"] = args.Region
		inputs["tags"] = args.Tags
	}
	inputs["created"] = nil
	inputs["hostname"] = nil
	inputs["ipv4"] = nil
	inputs["ipv6"] = nil
	inputs["transfer"] = nil
	inputs["updated"] = nil
	s, err := ctx.RegisterResource("linode:index/nodeBalancer:NodeBalancer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodeBalancer{s: s}, nil
}

// GetNodeBalancer gets an existing NodeBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeBalancer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodeBalancerState, opts ...pulumi.ResourceOpt) (*NodeBalancer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientConnThrottle"] = state.ClientConnThrottle
		inputs["created"] = state.Created
		inputs["hostname"] = state.Hostname
		inputs["ipv4"] = state.Ipv4
		inputs["ipv6"] = state.Ipv6
		inputs["label"] = state.Label
		inputs["region"] = state.Region
		inputs["tags"] = state.Tags
		inputs["transfer"] = state.Transfer
		inputs["updated"] = state.Updated
	}
	s, err := ctx.ReadResource("linode:index/nodeBalancer:NodeBalancer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodeBalancer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NodeBalancer) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NodeBalancer) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
func (r *NodeBalancer) ClientConnThrottle() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["clientConnThrottle"])
}

func (r *NodeBalancer) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// This NodeBalancer's hostname, ending with .nodebalancer.linode.com
func (r *NodeBalancer) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The Public IPv4 Address of this NodeBalancer
func (r *NodeBalancer) Ipv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv4"])
}

// The Public IPv6 Address of this NodeBalancer
func (r *NodeBalancer) Ipv6() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6"])
}

// The label of the Linode NodeBalancer
func (r *NodeBalancer) Label() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["label"])
}

// The region where this NodeBalancer will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode NodeBalancer.*.
func (r *NodeBalancer) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// A list of tags applied to this object. Tags are for organizational purposes only.
func (r *NodeBalancer) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

func (r *NodeBalancer) Transfer() *pulumi.Output {
	return r.s.State["transfer"]
}

func (r *NodeBalancer) Updated() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updated"])
}

// Input properties used for looking up and filtering NodeBalancer resources.
type NodeBalancerState struct {
	// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
	ClientConnThrottle interface{}
	Created interface{}
	// This NodeBalancer's hostname, ending with .nodebalancer.linode.com
	Hostname interface{}
	// The Public IPv4 Address of this NodeBalancer
	Ipv4 interface{}
	// The Public IPv6 Address of this NodeBalancer
	Ipv6 interface{}
	// The label of the Linode NodeBalancer
	Label interface{}
	// The region where this NodeBalancer will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode NodeBalancer.*.
	Region interface{}
	// A list of tags applied to this object. Tags are for organizational purposes only.
	Tags interface{}
	Transfer interface{}
	Updated interface{}
}

// The set of arguments for constructing a NodeBalancer resource.
type NodeBalancerArgs struct {
	// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
	ClientConnThrottle interface{}
	// The label of the Linode NodeBalancer
	Label interface{}
	// The region where this NodeBalancer will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode NodeBalancer.*.
	Region interface{}
	// A list of tags applied to this object. Tags are for organizational purposes only.
	Tags interface{}
}
