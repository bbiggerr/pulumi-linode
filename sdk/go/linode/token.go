// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Linode Token resource.  This can be used to create, modify, and delete Linode API Personal Access Tokens.  Personal Access Tokens proxy user credentials for Linode API access.  This is necessary for tools, such as Terraform, to interact with Linode services on a user's behalf.
// 
// It is common for Terraform itself to be configured with broadly scoped Personal Access Tokens.  Provisioning scripts or tools configured within a Linode Instance should follow the principle of least privilege to afford only the required roles for tools to perform their necessary tasks.  The `linode_token` resource allows for the management of Personal Access Tokens with scopes mirroring or narrowing the scope of the parent token.
// 
// For more information, see the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/getTokens).
// 
// ## Attributes
// 
// This resource exports the following attributes:
// 
// * `token` - The token used to access the API.
// 
// * `created` - The date this Token was created.
type Token struct {
	s *pulumi.ResourceState
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOpt) (*Token, error) {
	if args == nil || args.Scopes == nil {
		return nil, errors.New("missing required argument 'Scopes'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["expiry"] = nil
		inputs["label"] = nil
		inputs["scopes"] = nil
	} else {
		inputs["expiry"] = args.Expiry
		inputs["label"] = args.Label
		inputs["scopes"] = args.Scopes
	}
	inputs["created"] = nil
	inputs["token"] = nil
	s, err := ctx.RegisterResource("linode:index/token:Token", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TokenState, opts ...pulumi.ResourceOpt) (*Token, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["created"] = state.Created
		inputs["expiry"] = state.Expiry
		inputs["label"] = state.Label
		inputs["scopes"] = state.Scopes
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("linode:index/token:Token", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Token) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Token) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The date and time this token was created.
func (r *Token) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.
func (r *Token) Expiry() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expiry"])
}

// A label for the Token.
func (r *Token) Label() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["label"])
}

// The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure.
func (r *Token) Scopes() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scopes"])
}

// The token used to access the API.
func (r *Token) Token() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering Token resources.
type TokenState struct {
	// The date and time this token was created.
	Created interface{}
	// When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.
	Expiry interface{}
	// A label for the Token.
	Label interface{}
	// The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure.
	Scopes interface{}
	// The token used to access the API.
	Token interface{}
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.
	Expiry interface{}
	// A label for the Token.
	Label interface{}
	// The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure.
	Scopes interface{}
}
