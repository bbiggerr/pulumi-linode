// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Linode Volume resource.  This can be used to create, modify, and delete Linodes Block Storage Volumes.  Block Storage Volumes are removable storage disks that persist outside the life-cycle of Linode Instances. These volumes can be attached to and detached from Linode instances throughout a region.
// 
// For more information, see [How to Use Block Storage with Your Linode](https://www.linode.com/docs/platform/block-storage/how-to-use-block-storage-with-your-linode/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createVolume).
// 
// ## Attributes
// 
// This resource exports the following attributes:
// 
// * `status` - The label of the Linode Volume.
// 
// * `filesystem_path` - The full filesystem path for the Volume based on the Volume's label. The path is "/dev/disk/by-id/scsi-0Linode_Volume_" + the Volume label
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["label"] = nil
		inputs["linodeId"] = nil
		inputs["region"] = nil
		inputs["size"] = nil
		inputs["tags"] = nil
	} else {
		inputs["label"] = args.Label
		inputs["linodeId"] = args.LinodeId
		inputs["region"] = args.Region
		inputs["size"] = args.Size
		inputs["tags"] = args.Tags
	}
	inputs["filesystemPath"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("linode:index/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["filesystemPath"] = state.FilesystemPath
		inputs["label"] = state.Label
		inputs["linodeId"] = state.LinodeId
		inputs["region"] = state.Region
		inputs["size"] = state.Size
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("linode:index/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ +
// Volume label.
func (r *Volume) FilesystemPath() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filesystemPath"])
}

// The label of the Linode Volume
func (r *Volume) Label() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["label"])
}

// The ID of a Linode Instance where the the Volume should be attached.
func (r *Volume) LinodeId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["linodeId"])
}

// The region where this volume will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode Volume.*.
func (r *Volume) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Size of the Volume in GB.
func (r *Volume) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The status of the volume, indicating the current readiness state.
func (r *Volume) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// A list of tags applied to this object. Tags are for organizational purposes only.
func (r *Volume) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ +
	// Volume label.
	FilesystemPath interface{}
	// The label of the Linode Volume
	Label interface{}
	// The ID of a Linode Instance where the the Volume should be attached.
	LinodeId interface{}
	// The region where this volume will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode Volume.*.
	Region interface{}
	// Size of the Volume in GB.
	Size interface{}
	// The status of the volume, indicating the current readiness state.
	Status interface{}
	// A list of tags applied to this object. Tags are for organizational purposes only.
	Tags interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The label of the Linode Volume
	Label interface{}
	// The ID of a Linode Instance where the the Volume should be attached.
	LinodeId interface{}
	// The region where this volume will be deployed.  Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc.  *Changing `region` forces the creation of a new Linode Volume.*.
	Region interface{}
	// Size of the Volume in GB.
	Size interface{}
	// A list of tags applied to this object. Tags are for organizational purposes only.
	Tags interface{}
}
